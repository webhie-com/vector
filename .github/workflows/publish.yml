name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  release-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags and release notes
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Install dependencies
        run: bun install
      
      - name: Run tests
        run: bun test
      
      - name: Build package
        run: bun run build:lib
      
      - name: Update version in package.json
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
            git add package.json
            git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
            git push origin main
          else
            echo "Version already set to ${{ github.event.inputs.version }}"
          fi
      
      - name: Create and push tag
        run: |
          # Check if tag already exists
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ github.event.inputs.version }} already exists, skipping tag creation"
          else
            git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
            git push origin "v${{ github.event.inputs.version }}"
          fi
      
      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set registry https://registry.npmjs.org/
      
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag (excluding the one we just created)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "v${{ github.event.inputs.version }}^" 2>/dev/null || echo "")
          
          echo "## Release v${{ github.event.inputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          
          # Add custom release notes if provided
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "${{ github.event.inputs.release_notes }}" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add PR history
          echo "### Changes" >> release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            # Get merged PRs since last tag
            echo "#### Pull Requests" >> release_notes.md
            gh pr list \
              --state merged \
              --limit 100 \
              --json number,title,author,mergedAt \
              --jq ".[] | select(.mergedAt > \"$(git log -1 --format=%aI $PREVIOUS_TAG)\") | \"- #\\(.number): \\(.title) (@\\(.author.login))\"" \
              >> release_notes.md || echo "No PRs found" >> release_notes.md
            
            echo "" >> release_notes.md
            echo "#### Commits" >> release_notes.md
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%an)" >> release_notes.md
          else
            # First release - show all PRs
            echo "#### Pull Requests" >> release_notes.md
            gh pr list \
              --state merged \
              --limit 100 \
              --json number,title,author \
              --jq '.[] | "- #\(.number): \(.title) (@\(.author.login))"' \
              >> release_notes.md || echo "No PRs found" >> release_notes.md
            
            echo "" >> release_notes.md
            echo "#### Commits" >> release_notes.md
            git log --pretty=format:"- %s (%an)" --max-count=50 >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### Contributors" >> release_notes.md
          if [ -n "$PREVIOUS_TAG" ]; then
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%an" | sort -u | sed 's/^/- @/' >> release_notes.md
          else
            git log --pretty=format:"%an" | sort -u | sed 's/^/- @/' >> release_notes.md
          fi
          
          # Save release notes to output
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}